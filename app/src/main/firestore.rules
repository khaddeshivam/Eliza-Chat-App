rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isTestAccount() {
      return request.auth.token.firebase.sign_in_provider == 'password' &&
             request.auth.token.email == 'test@elizachat.dev';
    }

    function isValidPhoneNumber(phoneNumber) {
      return phoneNumber.matches('^\\+91\\d{10}$');
    }

    function isValidUserDocument(data) {
      return isValidPhoneNumber(data.phone_number) &&
             !data.test_account;
    }

    function isValidChatDocument(data) {
      return data.participants != null &&
             data.participants.size() > 0 &&
             data.participants.size() <= 50 &&
             data.participants.hasAny([request.auth.uid]) &&
             data.last_message != null &&
             data.last_message_time != null &&
             data.last_sender_id != null &&
             data.is_group != null &&
             data.name != null;
    }

    // Test users collection - no auth required for development
    match /test_users/{userId} {
      allow read, write: if true;
    }

    // Users collection
    match /users/{userId} {
      // Allow phone number verification before authentication
      allow read: if request.query.filters.size() == 1 &&
                    request.query.filters[0].field.fieldPath == 'phone_number' &&
                    request.query.filters[0].op == '==' &&
                    isValidPhoneNumber(request.query.filters[0].value.stringValue) ||
                    isAuthenticated();
      
      // Allow creation only if:
      // 1. User is authenticated
      // 2. Document ID matches auth UID
      // 3. Document contains valid user data
      allow create: if isAuthenticated() &&
                    userId == request.auth.uid &&
                    isValidUserDocument(request.resource.data);
      
      // Allow updates only if:
      // 1. User is authenticated and owner
      // 2. OR user is test account with test_account flag
      allow update: if 
        (isAuthenticated() && userId == request.auth.uid) ||
        (isTestAccount() && request.resource.data.test_account == true);
      
      allow delete: if false;
    }

    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      allow create: if isAuthenticated() && 
        isValidChatDocument(request.resource.data) &&
        request.auth.uid in request.resource.data.participants;
      
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants &&
        isValidChatDocument(request.resource.data);
      
      allow delete: if false;
    }

    // Messages subcollection
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      
      allow create: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      
      allow update, delete: if false;
    }
  }
}