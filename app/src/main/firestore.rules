rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isTestMode(data) {
      return data.testAccount == true && 
             data.testUserId != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() || 
        (request.auth.token.firebase.sign_in_provider == 'anonymous');
      
      allow create, update: if 
        // Regular authenticated users can manage their own data
        (isAuthenticated() && isOwner(userId)) ||
        // Test accounts can be created/updated with anonymous auth
        (request.auth.token.firebase.sign_in_provider == 'anonymous' && 
         request.resource.data.testAccount == true &&
         request.resource.data.testUserId == userId);
      
      allow delete: if false; // Prevent deletion
    }

    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if false;
    }

    // Messages subcollection
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      allow update, delete: if false;
    }
  }
}
